"use strict";(self.webpackChunktardito_dev=self.webpackChunktardito_dev||[]).push([[4050],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>u});var i=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},l=Object.keys(e);for(i=0;i<l.length;i++)n=l[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(i=0;i<l.length;i++)n=l[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var o=i.createContext({}),p=function(e){var t=i.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=p(e.components);return i.createElement(o.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},d=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,o=e.parentName,c=r(e,["components","mdxType","originalType","parentName"]),d=p(n),u=a,h=d["".concat(o,".").concat(u)]||d[u]||m[u]||l;return n?i.createElement(h,s(s({ref:t},c),{},{components:n})):i.createElement(h,s({ref:t},c))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,s=new Array(l);s[0]=d;var r={};for(var o in t)hasOwnProperty.call(t,o)&&(r[o]=t[o]);r.originalType=e,r.mdxType="string"==typeof e?e:a,s[1]=r;for(var p=2;p<l;p++)s[p]=n[p];return i.createElement.apply(null,s)}return i.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8501:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>s,default:()=>m,frontMatter:()=>l,metadata:()=>r,toc:()=>p});var i=n(7462),a=(n(7294),n(3905));const l={sidebar_position:14},s="Directives",r={unversionedId:"angular/directives",id:"angular/directives",title:"Directives",description:"We can define directives in Angular as special properties that can be used to insert logic into our templates. There are several directives in Angular, but the main ones are two: the ngFor directive and the ngIf directive.",source:"@site/docs/angular/directives.md",sourceDirName:"angular",slug:"/angular/directives",permalink:"/docs/angular/directives",draft:!1,tags:[],version:"current",sidebarPosition:14,frontMatter:{sidebar_position:14},sidebar:"tutorialSidebar",previous:{title:"A List of Missiles",permalink:"/docs/angular/rockets-list"},next:{title:"React",permalink:"/docs/category/react"}},o={},p=[{value:"The ngIf Directive",id:"the-ngif-directive",level:3},{value:"The ngFor Directive",id:"the-ngfor-directive",level:3}],c={toc:p};function m(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,i.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"directives"},"Directives"),(0,a.kt)("p",null,"We can define directives in Angular as special properties that can be used to insert logic into our templates. There are several directives in Angular, but the main ones are two: the ",(0,a.kt)("inlineCode",{parentName:"p"},"ngFor")," directive and the ",(0,a.kt)("inlineCode",{parentName:"p"},"ngIf")," directive."),(0,a.kt)("h3",{id:"the-ngif-directive"},"The ngIf Directive"),(0,a.kt)("p",null,"It allows you to specify a logical condition to instruct Angular whether to load the element to which the directive is applied or not. Let's consider having the following code:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-html"},"<div>\n  <h3>\n    Penguins\n  </h3>\n  <p>Penguins are birds that cannot fly</p>\n</div>\n")),(0,a.kt)("p",null,"Now let's say we want to load this ",(0,a.kt)("inlineCode",{parentName:"p"},"<div>")," and its content only when the ",(0,a.kt)("inlineCode",{parentName:"p"},"animal"),' variable is equal to "penguin":'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-html"},"<div *ngIf=\"animal === 'penguin'\">\n  <h3>\n    Penguins\n  </h3>\n  <p>Penguins are birds that cannot fly</p>\n</div>\n")),(0,a.kt)("p",null,"Angular will load this HTML only when the ",(0,a.kt)("inlineCode",{parentName:"p"},"animal")," variable has the value ",(0,a.kt)("inlineCode",{parentName:"p"},'"penguin"'),"."),(0,a.kt)("h3",{id:"the-ngfor-directive"},"The ngFor Directive"),(0,a.kt)("p",null,"It is used to load a specific element and its content a defined number of times. The syntax is similar to the previous directive, but in this case, instead of a condition, we iterate within a variable:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-html"},'<ul>\n  <li *ngFor="let species of penguinSpecies">\n    <p>{{ species }}</p>\n  </li>\n</ul>\n')),(0,a.kt)("p",null,"Let's assume that the ",(0,a.kt)("inlineCode",{parentName:"p"},"penguinSpecies")," variable is defined in the class as ",(0,a.kt)("inlineCode",{parentName:"p"},"['Magellanic', 'Emperor']"),". The final result loaded in the browser will be:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-html"},"<ul>\n  <li>\n    <p>Magellanic</p>\n  </li>\n  <li>\n    <p>Emperor</p>\n  </li>\n</ul>\n")),(0,a.kt)("p",null,"Let's put directives into practice starting from the template of the ",(0,a.kt)("inlineCode",{parentName:"p"},"missile")," component. Let's try removing the missile object that we applied:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff",metastring:'title="missile.component.ts"',title:'"missile.component.ts"'},"import { Component, Input } from '@angular/core';\nimport { Missile } from './missile';\n\n@Component({\n  selector: 'missile',\n  templateUrl: './missile.component.html',\n  styleUrls: ['./missile.component.css']\n})\nexport class MissileComponent {\n-  @Input() missile: Missile = { name: '', country: '', active: false}; \n+  @Input() missile?: Missile; \n}\n")),(0,a.kt)("p",null,"We don't want to have any missile with an empty ",(0,a.kt)("inlineCode",{parentName:"p"},"name")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"country"),". The question mark placed before the colon tells TypeScript that the value can be ",(0,a.kt)("inlineCode",{parentName:"p"},"undefined")," or of type ",(0,a.kt)("inlineCode",{parentName:"p"},"Missile"),"."),(0,a.kt)("p",null,"However, you may notice that now the terminal displays an error notification:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"\u2716 Failed to compile.\n")),(0,a.kt)("p",null,"Why did the compilation fail? Because now we've changed the definition of the missile component, saying that a missile can also be ",(0,a.kt)("inlineCode",{parentName:"p"},"undefined"),", and Angular is complaining that we are potentially accessing an object that can be ",(0,a.kt)("inlineCode",{parentName:"p"},"undefined")," in the template."),(0,a.kt)("p",null,"To resolve this issue, we can insert the ",(0,a.kt)("inlineCode",{parentName:"p"},"ngIf")," directive into the missile component's template to conditionally load the template only if missile information is available:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff",metastring:'title="missile.component.html"',title:'"missile.component.html"'},"- <div class=\"card {{missile.active ? 'active' : 'inactive' }}\">\n+ <div *ngIf=\"missile\" class=\"card {{missile.active ? 'active' : 'inactive' }}\">\n")),(0,a.kt)("p",null,"Here, we have resolved the error with conditional loading implemented using the ",(0,a.kt)("inlineCode",{parentName:"p"},"ngIf")," directive."),(0,a.kt)("p",null,"Now, let's put the ",(0,a.kt)("inlineCode",{parentName:"p"},"ngFor")," directive into practice:"),(0,a.kt)("p",null,"Let's move to the definition of the ",(0,a.kt)("inlineCode",{parentName:"p"},"listaMissili")," component and add two more missiles:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff",metastring:'title="lista-missili.component.ts"',title:'"lista-missili.component.ts"'},"{\n      name: 'BrahMos',\n      country: 'India',\n      active: false\n    },\n+   {\n+     name: 'Falcon 9',\n+     country: 'United States',\n+     active: true\n+   },\n+   {\n+     name: 'Ariane 5',\n+     country: 'France',\n+     active: true\n+   },\n   ]\n")),(0,a.kt)("p",null,"Now, theoretically, to display the two new added missiles, we need to add the following to the template:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-html"},'<li>\n  <missile [missile]="missili[3]"></missile>\n</li>\n<li>\n  <missile [missile]="missili[4]"></missile>\n</li>\n')),(0,a.kt)("p",null,"Imagine adding 1000 missiles now; as you can see, this process seems very manual and repetitive, and it can indeed be automated with ",(0,a.kt)("inlineCode",{parentName:"p"},"ngFor")," like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff",metastring:'title="lista-missili.component.html"',title:'"lista-missili.component.html"'},'- <h2>Here\'s a list of 3 missiles:</h2>\n+ <h2>Here\'s a list of 5 missiles:</h2>\n<ul class="list">\n-  <li>\n+  <li *ngFor="let missile of missili">\n-    <missile [missile]="missili[0]"></missile>\n-    <missile [missile]="missile"></missile>\n  </li>\n-  <li>\n-    <missile [missile]="missili[1]"></missile>\n-  </li>\n-  <li>\n-    <missile [missile]="missili[2]"></missile>\n-  </li>\n</ul>\n')),(0,a.kt)("p",null,"Now, we have automated the creation of an ",(0,a.kt)("inlineCode",{parentName:"p"},"<li>")," element containing a missile using the ",(0,a.kt)("inlineCode",{parentName:"p"},"ngFor")," directive."),(0,a.kt)("p",null,"As a final step, let's automate the number of missiles that appear in the title in the missile list template. We'll use property binding (",(0,a.kt)("inlineCode",{parentName:"p"},"{{}}"),") syntax and the length of the ",(0,a.kt)("inlineCode",{parentName:"p"},"missili")," array."),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"Lost in the final step? Find the code changes made in this lesson ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/lucatardi/spazio/commit/a1af00aebd17812d3a5c24a1f7645fc6a46e9781?diff=split"},"here"),".")))}m.isMDXComponent=!0}}]);
"use strict";(self.webpackChunktardito_dev=self.webpackChunktardito_dev||[]).push([[9612],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>u});var i=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=i.createContext({}),c=function(e){var t=i.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=c(e.components);return i.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},d=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),d=c(n),u=r,h=d["".concat(l,".").concat(u)]||d[u]||m[u]||a;return n?i.createElement(h,s(s({ref:t},p),{},{components:n})):i.createElement(h,s({ref:t},p))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,s=new Array(a);s[0]=d;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:r,s[1]=o;for(var c=2;c<a;c++)s[c]=n[c];return i.createElement.apply(null,s)}return i.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5645:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>m,frontMatter:()=>a,metadata:()=>o,toc:()=>c});var i=n(7462),r=(n(7294),n(3905));const a={sidebar_position:15},s="Services",o={unversionedId:"angular/services",id:"angular/services",title:"Services",description:"In Angular, services are objects used to share information among different components within the application.",source:"@site/docs/angular/services.md",sourceDirName:"angular",slug:"/angular/services",permalink:"/docs/angular/services",draft:!1,tags:[],version:"current",sidebarPosition:15,frontMatter:{sidebar_position:15},sidebar:"tutorialSidebar",previous:{title:"Directives",permalink:"/docs/angular/directives"},next:{title:"React",permalink:"/docs/category/react"}},l={},c=[],p={toc:c};function m(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,i.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"services"},"Services"),(0,r.kt)("p",null,"In Angular, services are objects used to share information among different components within the application."),(0,r.kt)("p",null,"In our application, missiles are defined in the ",(0,r.kt)("inlineCode",{parentName:"p"},"lista-missili")," component and are then passed one by one to instances of the ",(0,r.kt)("inlineCode",{parentName:"p"},"missile")," component. All of this works because the ",(0,r.kt)("inlineCode",{parentName:"p"},"missile")," components are children of the ",(0,r.kt)("inlineCode",{parentName:"p"},"lista-missili")," component."),(0,r.kt)("p",null,"But let's consider a scenario where we want to insert a new component called ",(0,r.kt)("inlineCode",{parentName:"p"},"missile-info")," to display missile details on a separate page. Since the ",(0,r.kt)("inlineCode",{parentName:"p"},"missile-info")," component will not be loaded as a child of the ",(0,r.kt)("inlineCode",{parentName:"p"},"lista-missili")," component, how do we pass the missiles to that component?"),(0,r.kt)("p",null,"This is where the use of a service comes into play. To create a service, we can use the CLI command ",(0,r.kt)("inlineCode",{parentName:"p"},"ng generate service \ud83d\udc27NAME\ud83d\udc27"),"."),(0,r.kt)("p",null,"Let's create a service called ",(0,r.kt)("inlineCode",{parentName:"p"},"missili"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"ng generate service missili\n")),(0,r.kt)("p",null,"The result is slightly different from what we got when creating components. In this case, no folder is created, and only two files are generated:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"A TypeScript file containing all the service logic."),(0,r.kt)("li",{parentName:"ul"},"A test file.")),(0,r.kt)("p",null,"Let's analyze the TypeScript file and describe its contents:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"First, we see that Angular imports a decorator called ",(0,r.kt)("inlineCode",{parentName:"li"},"Injectable"),"."),(0,r.kt)("li",{parentName:"ol"},"The decorator is invoked with a configuration object containing a property called ",(0,r.kt)("inlineCode",{parentName:"li"},"providedIn"),"."),(0,r.kt)("li",{parentName:"ol"},"It creates and exports a class called ",(0,r.kt)("inlineCode",{parentName:"li"},"MissiliService"),".")),(0,r.kt)("p",null,"First, let's move our array of missiles from the ",(0,r.kt)("inlineCode",{parentName:"p"},"lista-missili.component.ts")," file to our new service file:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="missili.service.ts"',title:'"missili.service.ts"'},"import { Injectable } from '@angular/core';\n\nconst missili = [\n  {\n   name: 'Vega',\n   country: 'Italy',\n   active: false\n  },\n  {\n    name: 'Tomahawk',\n    country: 'United States',\n    active: true\n  },\n  {\n    name: 'BrahMos',\n    country: 'India',\n    active: false\n  },\n  {\n    name: 'Falcon 9',\n    country: 'United States',\n    active: true\n  },\n  {\n    name: 'Ariane 5',\n    country: 'France',\n    active: true\n  },\n];\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MissiliService {\n\n  constructor() { }\n}\n")),(0,r.kt)("p",null,"Now, let's remove the ",(0,r.kt)("inlineCode",{parentName:"p"},"constructor")," method that we don't need at the moment and add a method to the ",(0,r.kt)("inlineCode",{parentName:"p"},"MissiliService")," class that returns our array of missiles:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff",metastring:'title="missili.service.ts"',title:'"missili.service.ts"'},"export class MissiliService {\n-  constructor() { }\n+  getMissili(): Missile[] {\n+    return missili;\n+  }\n}\n")),(0,r.kt)("p",null,"Notice how in TypeScript, we can use the same syntax to specify the return type of a function/method (in this case, an array of missiles ",(0,r.kt)("inlineCode",{parentName:"p"},"Missile[]"),")."),(0,r.kt)("p",null,"Now that we have the service ready, let's see how to consume a service's method in our ",(0,r.kt)("inlineCode",{parentName:"p"},"lista-missili")," component. Open the TypeScript file and do it in four steps:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Import the service into the file.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { MissiliService } from '../missili.service';\n")),(0,r.kt)("ol",{start:2},(0,r.kt)("li",{parentName:"ol"},"Inject the service into the ",(0,r.kt)("inlineCode",{parentName:"li"},"ListaMissiliComponent")," class.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"constructor(private missiliService: MissiliService) {}\n")),(0,r.kt)("ol",{start:3},(0,r.kt)("li",{parentName:"ol"},"Initialize the ",(0,r.kt)("inlineCode",{parentName:"li"},"missili")," property as an empty array.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"missili: Missile[] = [];\n")),(0,r.kt)("ol",{start:4},(0,r.kt)("li",{parentName:"ol"},"Instruct the component, during assembly, to execute the ",(0,r.kt)("inlineCode",{parentName:"li"},"getMissili")," method of the service.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"ngOnInit(): void {\n  this.missili = this.missiliService.getMissili();\n}\n")),(0,r.kt)("p",null,"There are two methods here that we might be seeing for the first time:"),(0,r.kt)("p",null,"The first one is the ",(0,r.kt)("inlineCode",{parentName:"p"},"constructor"),", which simply allows us to list the services that will be used within that class, in our case, ",(0,r.kt)("inlineCode",{parentName:"p"},"missiliService"),"."),(0,r.kt)("p",null,"The second one is the ",(0,r.kt)("inlineCode",{parentName:"p"},"ngOnInit")," method, which every component possesses and is executed every time the component is assembled for the first time. In this case, when the component is assembled, we assign to the ",(0,r.kt)("inlineCode",{parentName:"p"},"missili")," property what is returned by the ",(0,r.kt)("inlineCode",{parentName:"p"},"getMissili")," method of the service."),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"As always, you can find the modified code for this lesson ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/lucatardi/spazio/commit/50a5718201ed9c3b56e7515c77600d9cbee7d355?diff=split"},"here"),".")))}m.isMDXComponent=!0}}]);
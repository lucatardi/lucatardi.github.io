"use strict";(self.webpackChunktardito_dev=self.webpackChunktardito_dev||[]).push([[4723],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),m=u(n),d=a,y=m["".concat(s,".").concat(d)]||m[d]||c[d]||o;return n?r.createElement(y,l(l({ref:t},p),{},{components:n})):r.createElement(y,l({ref:t},p))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var u=2;u<o;u++)l[u]=n[u];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},4099:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>c,frontMatter:()=>o,metadata:()=>i,toc:()=>u});var r=n(7462),a=(n(7294),n(3905));const o={sidebar_position:6},l="Tuples \u2987\ud83d\udc27\u2988",i={unversionedId:"python/tuples",id:"python/tuples",title:"Tuples \u2987\ud83d\udc27\u2988",description:"In Python, a tuple is an ordered, immutable collection of elements. Tuples are very similar to lists, but the key difference is that once you create a tuple, you cannot change its elements (immutable). Tuples are defined by enclosing a comma-separated sequence of values in parentheses ().",source:"@site/docs/python/tuples.md",sourceDirName:"python",slug:"/python/tuples",permalink:"/it/docs/python/tuples",draft:!1,tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"Lists \u3016\ud83d\udc27\u3017",permalink:"/it/docs/python/lists"},next:{title:"Dictionaries \u2983\ud83d\udc27\u2984",permalink:"/it/docs/python/dictionaries"}},s={},u=[{value:"Immutability",id:"immutability",level:2},{value:"Slicing",id:"slicing",level:2},{value:"Methods",id:"methods",level:2}],p={toc:u};function c(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"tuples-"},"Tuples \u2987\ud83d\udc27\u2988"),(0,a.kt)("p",null,"In Python, a tuple is an ordered, immutable collection of elements. Tuples are very similar to lists, but the key difference is that once you create a tuple, you cannot change its elements (immutable). Tuples are defined by enclosing a comma-separated sequence of values in parentheses ",(0,a.kt)("inlineCode",{parentName:"p"},"()"),"."),(0,a.kt)("p",null,"Here's a basic example of creating a tuple:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"my_tuple = (1, 2, 3, 4, 5)\n")),(0,a.kt)("p",null,"We can also create a tuple without parentheses, but it's recommended to use them for clarity:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"my_tuple = 1, 2, 3, 4, 5\n")),(0,a.kt)("p",null,"We can access elements of a tuple using indexing, just like you would with a list. For example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"first_element = my_tuple[0]  # Access the first element (1)\n")),(0,a.kt)("p",null,"Tuples can contain elements of different data types, and they can be nested within each other. For example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"mixed_tuple = (1, 'hello', 3.14, [7, 8, 9])\nnested_tuple = (1, (2, 3), (4, 5, 6))\n")),(0,a.kt)("p",null,"Some important things to note about tuples:"),(0,a.kt)("h2",{id:"immutability"},"Immutability"),(0,a.kt)("p",null,"Similarly to ",(0,a.kt)("a",{parentName:"p",href:"strings"},"strings")," when we create a tuple, we cannot change its elements. This means we cannot add, remove, or modify elements in a tuple."),(0,a.kt)("h2",{id:"slicing"},"Slicing"),(0,a.kt)("p",null,"We can use slicing to access a subset of elements in a tuple. For example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"subset = my_tuple[1:4]  # Returns (2, 3, 4)\n")),(0,a.kt)("h2",{id:"methods"},"Methods"),(0,a.kt)("p",null,"Tuples have a limited set of methods compared to lists due to their immutability. You can use methods like ",(0,a.kt)("inlineCode",{parentName:"p"},"count")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"index")," to work with tuples."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"count_of_3 = my_tuple.count(3)  # Returns the number of times 3 appears in the tuple\nindex_of_4 = my_tuple.index(4)  # Returns the index of the first occurrence of 4\n")),(0,a.kt)("p",null,"Tuples are often used when you have a collection of items that should not change during the course of your program, such as coordinates, constant values, or records with fixed fields."))}c.isMDXComponent=!0}}]);